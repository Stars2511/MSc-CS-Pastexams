SECTION A
=========================================
QA1
-----------------------------------------
a)
If you pass a parameter of a type that is mutable, then if you just copy that straight into the class then you can change it - i.e gives access to internal state - def copying is making a copy of that parameter before storing it internally.

b)
A class is immutable if its instances cannot be modified
Advantages:
1. Immutables are simple and make good building blocks
2. Immutables can be cached
3. Immutables are thread-safe

c)
i)
It's impossible.
Because final Class cannot be inherited

ii)
For instances of Student
1. they provide mutator methods that modify object state
2. fields are not final
For instances of Tutor
1. field name is not final
2. Tutor does not defensively copy

iii)
public final class Tutor{
    private final name;
    private final Set<Student> tutees;

    public Tutor(String name, Student[] students){
        this.name = name;
        tutees = new TreeSet<Student>();
        for(int i = 0; i < students.length; i++){
            tutees.add(new Student(students[i].getName(), students[i].getCourse()));
        }
    }

    public Set<Student> getTutees(){
        Set<Student> newTutees = new TreeSet<Student>();
        for(Student tutee: tutees){
            newTutees.add(new Student(tutee[i].getName(), tutee[i].getCourse())));
        }
        return Collection.unmodifiableSet(newTutees);
    }

    public String getName(){
        return name;
    }
}
iv)
1. Remove set methods that modify object state
2. Make the class and all fields final
Yes, it's neccessary to re-write the Tutor class. Because tutees is still mutable.

QA2
-----------------------------------------
a)

b)
i)
public class InstrumentedTreeSet extends TreeSet{
    private int removeCount;

    public InstrumentedTreeSet(){
        super();
        this.removeCount = 0;
    }

    public void remove(){
        if(super.remove()){
            removeCount++;
        }
    }

    public int getRemoveCount(){
        return removeCount;
    }
}

ii)


Composition is not tied to the single-inheritance type hierarchy and is more powerful than sub-classing

iii)

QA3
-----------------------------------------
a)
i)
Hash set uses an object's integer hash code to index into an array and then allocate object to associated bucket
Set constructors enforce set semantics, remove any duplicate entries

ii)
because one object corresponding one hash code.
if hash code collisions the performance degrade

iii)
If hashCode and equals methods are incompatible then equal objects will hash to different positions in the hash table.

b)
public int compareTo(Name name){
    int lastCompare = lastName.compareTo(name.getLastName());
    if(lastCompare != 0){
        return lastCompare
    }
    int firstCompare = firstName.compareTo(name.getFirstName());
    return firstCompare;
}

c)
public class NameComparator implements Comparator<Name>{
    public int compare(Name nameOne, Name nameTwo){
        int lastCompare = nameOne.getLastName().compareTo(nameTwo.getLastName());
        if(lastCompare != 0){
            return lastCompare
        }
        int firstCompare = nameOne.getFirstName().compareTo(nameTwo.getFirstName());
        return firstCompare;
    }
}

d)
i)
resiable array would be better. Because add at tail runs in constant time:O(1)
II)
linked list would be better. Because O(1) to re-arrange list: O(n)

e)
Because A set is a collection that cannot contain duplicate elements
I would use HashSet. Because add, remove, contains and get are O(1) opertionns

SECTION B
=========================================
QB1
-----------------------------------------
a)
To create a new thread of concurrent activity in a Java program, the programmer must:
1. Define a new class that extends Thread or implements Runnable
2. Provide a suitable implementation of a run method   
3. Create an instance of the new class (and an instance of Thread if neccessary)
4. Invoke the start method on the thread object

b)
public class ThreadOne extends Thread {
    private final static int times = 100;
    private Object sharedLock;
    public ThreadOne(Object lock){
        sharedLock = lock;
    }
    public void run(){
        synchronized(sharedLock) {
            for(int i = 1; i <= times; i++){
                try {
                    if(i == 50){
                        sharedLock.wait();
                    }
                }catch(InterruptedException e) {
                    System.out.println("ee");
                }
                System.out.println(i);
            }
        }
    }
}
public class ThreadTwo extends Thread {
    private final static int times = 40;
    private Object sharedLock;

    public ThreadTwo(Object lock){
        sharedLock = lock;
    }
    public void run(){
        synchronized(sharedLock) {
            for(int i = 0; i < times; i++){
                System.out.println("A");
            }
            sharedLock.notifyAll();
        }
    }
}
public class MainThread {
    public static boolean lock = true;

    public static void main(String[] args){
        Thread one = new ThreadOne(lock);
        Thread two = new ThreadTwo(lock);
        one.start();
        two.start();
    }
}

c)
Two threads can access the same object if:
1. it is a global (static) object.
2. the object is defined in an enclosing scope(the threads are nested classes)
3. the object's reference is passed as an argument to each thread
To prevent interference, one needs to ensure that all accesses to the shared object are from within a critical section, implemented using the Java keyword, synchronized.

QB2
-----------------------------------------
a)
Monitors combine data encapsulation, mutual exclusion, and condition synchronization. The data structure encapsulated by the monitor is private, and can only be accessed via a set of public operations. Each operation acquires a lock associated with the monitor, thereby ensuring mutual exclusion and preventing interference. It is possible for operations to wait and signal conditions associated with the state of the monitor

b)
A monitor is a mechanism for ensuring that a shared data structure can be accessed concurrently without interference.

c)
public class CarPark{
    private final int capacity;
    private int cars = 0;

    public CarPark(int capacity){
        this.capacity = capacity;
    }

    public synchronized void acquireEnter() throws InterruptedException{
        while(cars === capacity){
            wait();  
        }
        cars++;
    }

    public synchronized void releaseLeave(){
        if(cars > 0){
            cars--;
            notifyAll();
        }
    }
}

QB3
-----------------------------------------
a)
Event driven programming involves writing programs whose flow of control depends on a sequence of external events rather than the internal control logic of the program itself.
1. Declare appropriate event handlers
2. Register event handlers with event dispatching mechanism
3. Pass control to event dispatcher and wait for events to occur
4. When event occurs, event dispatcher calls the appropriate event handler
5. Event handler executes and then returns control to event dispatcher

b)
In order to set up an event handler and deal with events, a Java programmer needs to:
1. define an event handling class that implements the appropriate "event listener" interface,
2. provide the neccessary event handling code,
3. register an instance of the event handling class with an event source by calling the appropriate "addListener" method.

c)
// import neccessary packages
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;

public class CylinderApplication implements ActionListener{
    private JFrame cylinderFrame;
    private JPanel cylinderPanel;
    private JTextField radiousTF, heightTF;
    private JButton calculateButton;
    private JTextField volumeTF;
    private double volume = 0;

    public CylinderApplication(){
        cylinderFrame = new JFrame();
        cylinderPanel = new JPanel();
        addWidgets();
        cylinderFrame.setContentPane(cylinderPanel);
        cylinderFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        cylinderFrame.pack();
        cylinderFrame.setVisible(true);
    }

    public void addWidgets(){
        radiousTF = new JTextField(10);
        heightTF = new JTextField(10);
        calculateButton = new JButton("Calculate");
        volumeTF = new JTextField(10);
        calculateButton.addActionListener(this);
        cylinderPanel.add(radiousTF);
        cylinderPanel.add(heightTF);
        cylinderPanel.add(calculateButton);
        cylinderPanel.add(volumeTF);
    }

    public void actionPerformed(ActionEvent e){
        String radious = radiousTF.getText();
        String height = heightTF.getText();
        volume = (double)(Math.PI * Double.parseDouble(radious) * Double.parseDouble(radious) * Double.parseDouble(height));
        volumeTF.setText(""+volume);
    }

    public static void main(String[] args){
        CylinderApplication cylinder = new CylinderApplication();
    }

}


